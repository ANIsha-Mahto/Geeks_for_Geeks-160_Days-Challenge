#include<vector>
#include<string>

class Solution {
  public:
  
    std::vector<int>buildLPS(const std::string &pattern){
        int m=pattern.size();
        std::vector<int>lps(m,0);
        int len=0;
        int i=1;
        while(i<m){
            if(pattern[i]==pattern[len]){
                len++;
                lps[i]=len;
                i++;
            }else{
              if(len!=0)
                   len=lps[len-1];
              else{
                  lps[i]=0;
                  i++;
              }
        }
    }
    return lps;
    
}
bool kmpsearch(const std::string &text,const std::string &pattern){
    int n=text.size(),m=pattern.size();
    std::vector<int>lps=buildLPS(pattern);
    
    int i=0,j=0;
    while(i<n){
        if(text[i]==pattern[j]){
            i++;j++;
        }
        if(j==m)
           return true;
        else if(i<n && text[i]!=pattern[j]){
            if(j!=0)
               j=lps[j-1];
            else
               i++;
        }
    }
    return false;
}
bool areRotations(const std::string &s1, const std::string &s2) {
        if(s1.size()!=s2.size())return false;
        std::string combined=s1+s1;
        return kmpsearch(combined,s2);
        
    }
};
